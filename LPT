#include <stdio.h>
#include <stdlib.h>
#define MAX_ELEMENT 20

typedef struct {
	int id; //기기
	int avail; //처리하는 데이터값
}element;
typedef struct {
	element heap[MAX_ELEMENT];
	int heap_size;
}HeapType;

//생성 함수
HeapType* create() {
	return (HeapType*)malloc(sizeof(HeapType));
}
//초기화 함수
void init(HeapType* h) {
	h->heap_size = 0;
}
#define JOBS 7
#define MACHIENS 3

void insert_min_heap(HeapType* h, element item) {
	int i;
	i = ++(h->heap_size);

	// 트리를 거슬러 올라가면서 부모 노드와 비교
	while((i != 1) && (item.avail < h->heap[i / 2].avail)) {
		h->heap[i] = h->heap[i / 2];
		i /= 2;
	}
	h->heap[i] = item;
}

element delete_min_heap(HeapType* h) {
	int parent, child;
	element item, temp;

	item = h->heap[1];
	temp = h->heap[(h->heap_size)--];
	parent = 1;
	child = 2;
	while (child <= h->heap_size) {
		if ((child < h->heap_size) &&
			(h->heap[child].avail) > h->heap[child + 1].avail)
			child++;
		if (temp.avail < h->heap[child].avail) break;

		h->heap[parent] = h->heap[child];
		parent = child;
		child *= 2;
	}
	h->heap[parent] = temp;
	return item;
}

int main(void) {
	int jobs[JOBS] = { 8, 7, 6, 5, 3, 2, 1 };
	element m = { 0, 0 };

	HeapType* heap;

	heap = create();
	init(heap);

	//삽입
	for (int i = 0; i < MACHIENS; i++) {
		m.id = i + 1;
		m.avail = 0;
		insert_min_heap(heap, m);
	}

	//삭제
	for (int i = 0; i < JOBS; i++) {
		m = delete_min_heap(heap, m);
		printf("JOB %d를 시간 %d부터 시간 %d까지 machine %d 번에 할당함\n", i, m.avail, m.avail + jobs[i]-1, m.id);
		m.avail += jobs[i];
		insert_min_heap(heap, m);
	}
	free(heap);
	return 0;
}
